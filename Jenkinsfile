def runPlaybook(String playbook) {
    sh """echo '${playbook}' > 1.log"""
}

projectDescription = """<p>–ü–µ—Ä–µ–Ω–æ—Å –∏–∑ excel. –°–∫—Ä–∏–ø—Ç scripts/client_file_import/import.py/p>
        <p><a href='https://huntflow.atlassian.net/wiki/spaces/SUPPORTENGINEERS/pages/2802057217?atlOrigin=eyJpIjoiYzQ5OTNjYzIyNDZmNGVmN2E3YzQzMDllNTNhZTJlMTMiLCJwIjoiY29uZmx1ZW5jZS1jaGF0cy1pbnQifQ<width='1'>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è url –∏ –ø–∞—Ä–æ–ª—è –∏–∑ owncloud</p>
        <p><a href='https://huntflow.atlassian.net/browse/DEVOPS-926<width='1'>Jira Ticket</p>"""

// Build info
currentBuild.displayName = "–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${params.INVENTORY_FILE} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${params.ACCOUNT_ID} –∏–∑ excel #${currentBuild.number}"
currentBuild.description = "–ò–º–ø–æ—Ä—Ç –∏–∑ —ç–∫—Å–µ–ª—å"

pipeline {
    agent any
    
    parameters {
        string(name: 'USER_ID', defaultValue: '5698', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∏–º–ø–æ—Ä—Ç')
        validatingString(name: 'OWNCLOUD_URL', defaultValue: 'https://securedata.huntflow.ru/s/X5Mwqu0hjZ10N17', description: '–°—Å—ã–ª–∫–∞ –Ω–∞ excel-—Ñ–∞–π–ª', regex: '^https://securedata.huntflow.ru/s/.*$') 
        
    }
    
    environment {
        STEP = 'FOO'
        CURRENT_DATE = new Date().format("ddMMyyyy_HHmmssS")
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))

    }
    
    stages {
        stage("‚¨áÔ∏è Checkout repositories") {
            steps{
                retry(1) {
                    checkout([
                        $class: 'GitSCM',
                        userRemoteConfigs: [[
                            url: 'https://github.com/alexdiptan/playbooks.git',
                            credentialsId: 'jenkins_git_token'
                        ]],
                        branches: [[name: 'master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'CloneOption', depth: 1, noTags: false, reference: '/opt/gitcache/playbooks.git', shallow: true, timeout: 20]
                        ],
                        submoduleCfg: []
                    ])
                }
            }
        }
        stage('üëÆ Add huntflow_import to org') {
            steps {
                script {
                    if (params.USER_ID == 'huntflow_import_user_id') {
                        echo 'Use default user'
                        runPlaybook('user_control')
                    } else {
                        echo 'Skip this step'
                    }
                }
            }
        }        
        stage('Check') {
            steps {
                script {
                    println CURRENT_DATE
                    def all_stages = [
                        'üîß Consistency check before': 'consistency_check',
                        'üì≤ Download file': 'download_file',
                        'üì• Import': 'files_import',
                        'üë§ Applicants reindex': 'applicants_reindex',
                        'üìú Vacancies reindex': 'vacancies_reindex',
                        'üëØ‚Äç Find duplicates': 'find_duplicates',
                        'üîß Consistency check after': 'consistency_check'
                    ]
                    all_stages.each { stageName, playbook ->
                        stage(stageName) {
                            runPlaybook(playbook)
                        }
                    }
                }
            }
        }
    }
    post {
            always {
                archiveArtifacts "**/*"
            }
            success {
                println 'Success'
            }
            failure {
                sh 'echo 321'
            }
    }
}
